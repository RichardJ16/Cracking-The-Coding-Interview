Q1_1Naive: Brute force check.

Q1_1Hash: Dictionary maps indices to the characters(keys). Thus, if the string does not contain all unique characters 
	then the length of the keys will be less than the length of the string.

Q1_2: Sort the strings and then perform a string comparison

Q1_3: Checks if the current index is a space. If it is, then it sets it to %20 and appends to our return string.

Q1_4: Similar to Q1_1Hash. Map indices to keys and then take the length of the indices at each key. If the key has an odd
	number of values we add 1 to the counter and if this counter is not 0 or 1 then it can not be a palindrome.

Q1_5: Not a very elegant solution. Immediately return false if the difference between lengths are greater than one since that would
	result in a removal of at least 2. Otherwise compare all chars, and add one if there is a mismatched char unless
	the difference in length is 1, then we make sure we know which string is smaller then add 2 to the iterator of the bigger
	string to realign the iterators

Q1_6: Uses a counter to count repeated strings while iterating. When we reach the end of duplicate characters we append the chat along
	with the count and then reset the count and continue. At end of string we check whether it is a duplicate or not and then we
	return our helper function checkRetString to determine whether we should return the original or the compressed version.

	Note: There is defintely a way to return the original before calculations, so I might come back and try and figure out 
		the rule later on.

Q1_7: Transpose the Matrix. Using comma operator to pass on the temp variable you swap all indices [i][j] and [j][i]. To clean this
	up a bit you can put transpose as a function and just call it with the matrix as a param and return the transposed matrix.
	Once it has been transposed you just need to reverse. Temp is an offset iterator. I got lazy with the test problems.

Q1_8: This algorithm is a bit on the greedier side. It adds the i and j of a found 0 to two arrays and then for every element in that
	array we assign the column and row of the matrix to 0. The problem with this implementation is that a worst case of all 0's
	would result in the matrix reassigning each row and column to 0 anyway.

Q1_9: A rotation revolved around a specific point. So if we add the string to itself, we would be left with the rotated word in the 
	string somewhere. We get one use of isSubstring(), so if we concatenate s1 with itself and check whether it contains the 
	substring we will get a truth value for isRotation()